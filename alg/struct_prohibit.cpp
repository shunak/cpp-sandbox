/* 39_06.c 構造体メンバー間をポインターで相対指定してはいけない理由 */
#include <stdio.h>

#define MacFmt "&( st.a ) = %p\n&( st.b ) = %p\n&( st.c ) = %p\n"

int main(void)
{
    struct tag
    {
        int a;
        char b;
        int c;
    };

    struct tag st;

    printf(MacFmt, &(st.a), &(st.b), &(st.c));

    return (0);
}


/**
 * st.a のアドレスと st.b のアドレスは 4 バイト離れています。 int 型が 4 バイト環境なのでそう考えるのも無理はありません。
　st.b のアドレスと st.c のアドレスが 4 バイト離れています。 st.b は char 型なので 1 バイトしか離れないはずです。実際にはアラインメント処理によりパディングされたのです。どの様にパディングされるかはコンパイラー依存です。
　従って st.b のアドレスに 1 加算してもそれは st.c のアドレスには成り得ません。
　構造体型の各メンバーはその定義順に記憶領域に配置されます。しかしメンバー間のアドレス変化量はメンバーの型の大きさと一致するとは限りません。
 *
 * **/ 